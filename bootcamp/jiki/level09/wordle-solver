// Return how "close" a guess is to the target.
function process_guess with target, guess do
  // Count how often each letter is in the target, ie available to "count".
  set available to {}
  for each letter in target do
    if not my#has_key(available, letter) do
      change available[letter] to 0
    end
    change available[letter] to available[letter] + 1
  end

  // Initialize the result to all-absent the color in correct then present.
  set result to ["absent", "absent", "absent", "absent", "absent"]
  for each letter in guess indexed by idx do
    if letter == target[idx] do
      change result[idx] to "correct"
      change available[letter] to available[letter] - 1
    end
  end
  for each letter in guess indexed by idx do
    if result[idx] == "absent" and my#has_key(available, letter) and available[letter] > 0 do
      change result[idx] to "present"
      change available[letter] to available[letter] - 1
    end
  end
  return result
end

// Return whether a guess is valid or not based on prior results.
function valid_choice with guess, correct, absent, present do
  // Make sure all known correct letters match.
  for each letter in correct indexed by idx do
    if letter != "" and guess[idx] != letter do
      return false
    end
  end
  // Make sure no known absent letters get used.
  for each letter, _ in absent do
    if my#contains(guess, letter) do
      return false
    end
  end
  // Make sure all present letters are used -- but in a new location.
  for each letter, positions in present do
    if not my#contains(guess, letter) do
      return false
    end
    for each position in positions do
      if guess[position] == letter do
        return false
      end
    end
  end
  return true
end

// Play the game!
function process_game do
  // Setup
  set game to new WordleGame()
  game.draw_board()
  
  // Initialize variables we will use.
  set common to common_words()
  set guess to ""
  set present_letters to {}            // letters present/correct in the current guess -- don't add to absent.
  set got to []
  set guess_idx to 0
  set valid_guess to true
  set done to true
  set correct_count to 0
  // State tracking.
  set correct to ["", "", "", "", ""]  // known correct letters in fixed locations
  set absent to {}                     // known absent letters
  set present to {}                    // known present -- and what position they are _not_ in.
  
  repeat 6 times indexed by step do
    // Pick the next guess.
    for each i in common do
      change guess_idx to guess_idx + 1
      change guess to common[guess_idx]
      if valid_choice(guess, correct, absent, present) do
        break
      end
    end
    // Guess the word then update tracking state.
    change got to process_guess(game.target_word, guess)
    change correct_count to 0
    for each result in got indexed by idx do
      if result == "correct" do
        change correct[idx] to guess[idx]
        change correct_count to correct_count + 1
        change present_letters[guess[idx]] to true
      else if result == "present" do
        change present_letters[guess[idx]] to true
        if not my#has_key(present, guess[idx]) do
          change present[guess[idx]] to []
        end
        change present[guess[idx]] to push(present[guess[idx]], idx)
      end
    end
    for each result in got indexed by idx do
      if result == "absent" and not my#has_key(present_letters, guess[idx]) do
        change absent[guess[idx]] to true
      end
    end
    // Record the guess and exit when done.
    game.add_word(step, guess, got)
    if correct_count == 5 do
      break
    end
  end
end
