// Return the "score" of a guess.
function process_guess with target, guess do
  set result to []
  for each letter in guess indexed by idx do
    if letter == target[idx] do
      change result to push(result, "correct")
    else if my#contains(target, letter) do
      change result to push(result, "present")
    else do
      change result to push(result, "absent")
    end
  end
  return result
end

// Return if a guess is a good guess based on past state.
function valid_choice with guess, correct, absent, present do
  for each letter in correct indexed by idx do
    if letter != "" and guess[idx] != letter do
      return false
    end
  end
  for each letter in absent do
    if my#contains(guess, letter) do
      return false
    end
  end
  for each letter, positions in present do
    if not my#contains(guess, letter) do
      return false
    end
    for each position in positions do
      if guess[position] == letter do
        return false
      end
    end
  end
  return true
end

function process_game do
  set game to new WordleGame()
  game.draw_board()
  
  set common to common_words()
  set guess to ""
  set got to []
  set correct to ["", "", "", "", ""]
  set absent to []
  set present to {}
  set guess_idx to 0
  set correct_count to 0
  
  repeat 6 times indexed by step do
    // Pick the next guess.
    for each i in common do
      change guess_idx to guess_idx + 1
      change guess to common[guess_idx]
      if valid_choice(guess, correct, absent, present) do
        break
      end
    end
    // Guess the word then update tracking state.
    change got to process_guess(game.target_word, guess)
    change correct_count to 0
    for each result in got indexed by idx do
      if result == "correct" do
        change correct[idx] to guess[idx]
        change correct_count to correct_count + 1
      else if result == "absent" and not my#contains(absent, guess[idx]) do
        change absent to push(absent, guess[idx])
      else if result == "present" do
        if not my#has_key(present, guess[idx]) do
          change present[guess[idx]] to []
        end
        change present[guess[idx]] to push(present[guess[idx]], idx)
      end
    end
    // Record the guess and exit when done.
    game.add_word(step, guess, got)
    if correct_count == 5 do
      break
    end
  end
end
