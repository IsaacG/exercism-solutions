{
  "version": 3,
  "status": "pass",
  "tests": [
    {
      "name": "MakingTheGrade > round scores",
      "status": "pass",
      "test_code": "input_data = [\n    [90.33, 40.5, 55.44, 70.05, 30.55, 25.45, 80.45, 95.3, 38.7, 40.3],\n    [],\n    [50, 36.03, 76.92, 40.7, 43, 78.29, 63.58, 91, 28.6, 88.0],\n    [.5],\n    [1.5]\n]\nresult_data = [\n    [40, 39, 95, 80, 25, 31, 70, 55, 40, 90],\n    [],\n    [88, 29, 91, 64, 78, 43, 41, 77, 36, 50],\n    [0],\n    [2]\n]\nnumber_of_variants = range(1, len(input_data) + 1)\n\nfor variant, scores, results in zip(number_of_variants, input_data, result_data):\n    with self.subTest(f\"variation #{variant}\", scores=scores, results=results):\n        self.assertEqual(sorted(round_scores(scores)), sorted(results),\n                         msg=f'Expected: {results} but one or more {scores} were rounded incorrectly.')",
      "task_id": 1
    },
    {
      "name": "MakingTheGrade > no failed students",
      "status": "pass",
      "test_code": "scores = [89, 85, 42, 57, 90, 100, 95, 48, 70, 96]\nexpected = 0\nself.assertEqual(count_failed_students(scores), expected,\nmsg=f\"Expected the count to be {expected}, but the count wasn't calculated correctly.\")",
      "task_id": 2
    },
    {
      "name": "MakingTheGrade > some failed students",
      "status": "pass",
      "test_code": "scores = [40, 40, 35, 70, 30, 41, 90]\nexpected = 4\nself.assertEqual(count_failed_students(scores), expected,\n    msg=f\"Expected the count to be {expected}, but the count wasn't calculated correctly.\")",
      "task_id": 2
    },
    {
      "name": "MakingTheGrade > above threshold",
      "status": "pass",
      "test_code": "input_data = [\n    [40, 39, 95, 80, 25, 31, 70, 55, 40, 90],\n    [88, 29, 91, 64, 78, 43, 41, 77, 36, 50],\n    [100, 89],\n    [88, 29, 91, 64, 78, 43, 41, 77, 36, 50],\n    []\n]\nthresholds = [98, 80, 100, 78, 80]\nresult_data = [\n    [],\n    [88, 91],\n    [100],\n    [88, 91, 78],\n    []\n]\nnumber_of_variants = range(1, len(input_data) + 1)\n\nfor variant, score, threshold, result in zip(number_of_variants, input_data, thresholds, result_data):\n    with self.subTest(f\"variation #{variant}\", score=score, threshold=threshold, result=result):\n        self.assertEqual(above_threshold(score, threshold), result,\n                         msg=f'Expected: {result} but the number of scores above {threshold} is incorrect.')",
      "task_id": 3
    },
    {
      "name": "MakingTheGrade > letter grades",
      "status": "pass",
      "test_code": "input_data = [100, 97, 85, 92, 81]\nresult_data = [\n    [41, 56, 71, 86],\n    [41, 55, 69, 83],\n    [41, 52, 63, 74],\n    [41, 54, 67, 80],\n    [41, 51, 61, 71]\n]\nnumber_of_variants = range(1, len(input_data) + 1)\n\nfor variant, highest, result in zip(number_of_variants, input_data, result_data):\n    with self.subTest(f\"variation #{variant}\", highest=highest, result=result):\n        self.assertEqual(letter_grades(highest), result,\n                         msg=f'Expected: {result} but the grade thresholds for a high score of {highest} are incorrect.')",
      "task_id": 4
    },
    {
      "name": "MakingTheGrade > student ranking",
      "status": "pass",
      "test_code": "scores = [\n    [100, 98, 92, 86, 70, 68, 67, 60, 50],\n    [82],\n    [88, 73],\n]\nnames = [\n    ['Rui', 'Betty', 'Joci', 'Yoshi', 'Kora', 'Bern', 'Jan', 'Rose'],\n    ['Betty'],\n    ['Paul', 'Ernest'],\n]\nresult_data = [\n    ['1. Rui: 100', '2. Betty: 98', '3. Joci: 92', '4. Yoshi: 86',\n     '5. Kora: 70', '6. Bern: 68', '7. Jan: 67', '8. Rose: 60'],\n    ['1. Betty: 82'],\n    ['1. Paul: 88', '2. Ernest: 73']\n]\nnumber_of_variants = range(1, len(scores) + 1)\n\nfor variant, scores, names, results in zip(number_of_variants, scores, names, result_data):\n    with self.subTest(f\"variation #{variant}\", scores=scores, names=names, results=results):\\\n        self.assertEqual(student_ranking(scores, names), results,\n                         msg=f'Expected: {results} but the rankings were compiled incorrectly.')",
      "task_id": 5
    },
    {
      "name": "MakingTheGrade > perfect score",
      "status": "pass",
      "test_code": "input_data =  [\n                 [['Rui', 60],['Joci', 58],['Sara', 91],['Kora', 93], ['Alex', 42],\n                  ['Jan', 81],['Lilliana', 40],['John', 60],['Bern', 28],['Vlad', 55]],\n\n                 [['Yoshi', 52],['Jan', 86], ['Raiana', 100], ['Betty', 60],\n                  ['Joci', 100],['Kora', 81],['Bern', 41], ['Rose', 94]],\n\n                 [['Joci', 100],['Vlad', 100],['Raiana', 100],['Alessandro', 100]],\n                 [['Jill', 30], ['Paul', 73],],\n                 []\n             ]\nresult_data = [\n    \"No perfect score.\",\n    ['Raiana', 100],\n    ['Joci', 100],\n    \"No perfect score.\",\n    \"No perfect score.\"\n]\n\nnumber_of_variants = range(1, len(input_data) + 1)\n\nfor variant, scores, results in zip(number_of_variants, input_data, result_data):\n    with self.subTest(f\"variation #{variant}\", scores=scores, results=results):\n        self.assertEqual(perfect_score(scores), results,\n                         msg=f'Expected: {results} but got something different for perfect scores.')",
      "task_id": 6
    }
  ]
}
